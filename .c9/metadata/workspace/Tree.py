{"filter":false,"title":"Tree.py","tooltip":"/Tree.py","undoManager":{"mark":0,"position":0,"stack":[[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":0},"end":{"row":0,"column":11}},"text":"class Tree:"},{"action":"insertText","range":{"start":{"row":0,"column":11},"end":{"row":1,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":1,"column":0},"end":{"row":28,"column":0}},"lines":["    def __init__(self, cargo, left = None, right = None, depth = 0):","        self.cargo = cargo","        self.depth = depth","        self.left = left","        self.right = right","","    def __str__(self):","        return str(self.cargo)","    def total(self, tree):","        if tree == None: return 0","        return tree.total(tree.left) + tree.total(tree.right) + tree.cargo","    def printTree(self, tree):","        if tree != None:","            tree.printTree(tree.right)","            print(\"\\t\"*tree.depth+\"%s\"%tree.cargo)","            tree.printTree(tree.left)","    def convertFromBin(self, tree):","        if tree!= None:","            tree.cargo = int(tree.cargo, 2)","            tree.convertFromBin(tree.left)","            tree.convertFromBin(tree.right)","    def leaves(self, tree, s):","        if(tree.left!=None and tree.right!=None):","            tree.leaves(tree.left, s)","            tree.leaves(tree.right, s)","        else:","            s.add(tree.cargo)"]},{"action":"insertText","range":{"start":{"row":28,"column":0},"end":{"row":28,"column":20}},"text":"            return s"}]}]]},"ace":{"folds":[],"scrolltop":0,"scrollleft":0,"selection":{"start":{"row":28,"column":20},"end":{"row":28,"column":20},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":0},"timestamp":1406660356536,"hash":"94c66821b37f942a21c5d2a216652349dbe71c26"}